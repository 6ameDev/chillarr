name: watchtower

services:
  acaiwatch:
    image: containrrr/watchtower:latest
    container_name: acaiwatch
    environment:
      - TZ=${TIMEZONE}
      - WATCHTOWER_DEBUG=true
      # - WATCHTOWER_MONITOR_ONLY=true
      # Labels: com.centurylinklabs.watchtower.enable [Boolean], com.centurylinklabs.watchtower.monitor-only [Boolean]
      - WATCHTOWER_LABEL_ENABLE=true
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=30
      # - WATCHTOWER_SCHEDULE=0 0 * * *  # Run once a day at midnight
      - WATCHTOWER_REMOVE_VOLUMES=true
      - WATCHTOWER_INCLUDE_STOPPED=false
      - WATCHTOWER_REVIVE_STOPPED=false
      - WATCHTOWER_NOTIFICATIONS=shoutrrr
      - WATCHTOWER_NOTIFICATION_URL=${NOTIFICATION_URL}
      - WATCHTOWER_ROLLING_RESTART=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - watchnet
    restart: unless-stopped

  # macwatch:
  #   image: containrrr/watchtower:latest
  #   container_name: macwatch
  #   environment:
  #     - WATCHTOWER_SCHEDULE=0 0 * * *  # Run once a day at midnight
  #     - WATCHTOWER_NOTIFICATION_DISCORD_WEBHOOK=https://discord.com/api/webhooks/<your_webhook_id>
  #     - WATCHTOWER_NOTIFICATIONS=shoutrrr
  #   command:
  #     - --host=tcp://192.168.1.2:2375     # Connect to remote Docker daemon
  #     - --cleanup                         # Remove old images after updates
  #     - --include-restarting              # Include restarting containers
  #     - --label-enable                    # Enable label-based filtering
  #     - --no-restart-on-failure           # Do not restart failed updates
  #   networks:
  #     - watchnet
  #   restart: unless-stopped

networks:
  watchnet:
    name: watchnet
